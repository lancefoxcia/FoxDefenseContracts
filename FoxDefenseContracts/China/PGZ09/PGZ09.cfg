PART
{

// --- general parameters ---
name = PGZ09
module = Part
author = Marhfg

// --- asset parameters ---
mesh = PGZ09.mu
rescaleFactor = 1

// --- node definitions ---
node_stack_bottom = 0, 0, 0, 0, -1, 0, 1
node_attach = 0, 0, 0, 0, -1, 0, 1

// --- editor parameters ---
TechRequired = precisionEngineering
entryCost = 2100
cost = 3425
category = Utility
subcategory = 0
title = PGZ09
manufacturer = Fox Defense Contracts
description = The Type 09 (PLA military designation: PGZ09 – Chinese: 09式自行高射炮; pinyin: 09 shì zì xíng gāoshèpào, "Type 09 self-propelled anti-aircraft artillery") is a Chinese self-propelled anti-aircraft vehicle manufactured by Norinco. It is armed with two 35 millimeter cannons and optionally two fire-and-forget infrared homing missiles. It started to gradually replace the predecessor Type 95 in 2009. Some military analysts designated the vehicle as Type 07, but the official designation was confirmed as Type 09 on the Theme Exhibition of the 90th Anniversary of Chinese People's Liberation Army in 2017.
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,1,1,1

// --- standard part parameters ---
mass = 0.57
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 250
maxTemp = 3600
stagingIcon = SOLID_BOOSTER

MODULE
{
	name = HitpointTracker
	ArmorThickness = 10
	maxHitPoints = 1500
}
MODULE
{
	name = ModuleTurret
	turretID = 0
	
	yawTransformName = yawTransform
	pitchTransformName = pitchTransform
	
	pitchSpeedDPS = 85
	yawSpeedDPS = 85
	
	minPitch = -2
	maxPitch = 85
	yawRange = 360
	
	smoothRotation = true
	smoothMultiplier = 10
}
MODULE
{
	name = ModuleWeapon
	turretID = 0
	
	fireTransformName = fireTransform
	muzzleTransformName = muzzleTransform; muzzleTransform1;
	
	hasDeployAnim = false
	
	hasFireAnimation = true
	fireAnimName = PGZ09Anim1; PGZ09Anim2
	spinDownAnimation = false
	
	roundsPerMinute = 550
	maxDeviation = 0.031
	maxTargetingRange = 13500
	maxEffectiveDistance = 13500
	
	ammoName = Medium
	bulletType = 35mmPGZ09APDS; 35mmPGZ09HEI
	requestResourceAmount = 1
	RoundsPerMag = 200
	ReloadTime = 1
	BeltFed = false
	
	hasRecoil = true
	onlyFireInRange = false
	bulletDrop = true
	
	weaponType = ballistic
	
	projectileColor = 255, 247, 0, 255
	
	tracerStartWidth = 0.4
	tracerEndWidth = 0.1
	tracerLength = 0
	
	maxHeat = 3600
	heatPerShot = 60
	heatLoss = 740
	
	fireSoundPath = FoxDefenseContracts/Sounds/25mm
	overheatSoundPath = BDArmory/Parts/50CalTurret/sounds/turretOverheat
	oneShotSound = true
	showReloadMeter = true
	
}
RESOURCE
{
	name = Medium
	amount = 440
	maxAmount = 440
}

MODULE
{
        name = ModuleRadar

        // -- Section: General Configuration --
        radarName = PGZ09 Locking Radar		// if left empty part.title is used, but advised to set this to a nice printable text
        rwrThreatType = 0				// IMPORTANT, please set correctly:
                                // 0 = SAM site radar
                                // 1 = Fighter radar (airborne)
                                // 2 = AWACS radar (airborne)
                                // 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
                                // 5 = Detection radar (ground/ship based)
                                // 6 = SONAR (ship/submarine based)
        rotationTransformName = radarBase
	    turretID = 1					// if needed
        resourceDrain = 0.85				// change to higher values for more capable radars, e.g AESA

        // -- Section: Capabilities --
        omnidirectional = true				// false: boresight scan radar
        directionalFieldOfView = 30			// for omni and boresight
        //boresightFOV = 15				// for boresight only
        scanRotationSpeed = 240				// degress per second
        //lockRotationSpeed = 120				// only relevant if canLock
        //lockRotationAngle = 4
        showDirectionWhileScan = true			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
        //multiLockFOV = 30				// only relevant if canLock
        //lockAttemptFOV = 2				// only relevant if canLock
        maxLocks = 1					//how many targets can be locked/tracked simultaneously. only relevant if canLock

        canScan = true					// scanning/detecting targets (volume search)
        canLock = true					// locking/tracking targets (fire control)
        canTrackWhileScan = true			// continue scanning while tracking a locked target
        canRecieveRadarData = true			// can work as passive data receiver (NOTE THE SPELLING! [SIC])

        minSignalThreshold = 120				// DEPRECATED, NO LONGER USED! use detection float curve!
        minLockedSignalThreshold = 180			// DEPRECATED, NO LONGER USED! use locktrack float curve!

        radarGroundClutterFactor = 0.20			// how much is the radar efficiency reduced to by ground clutter/look-down?
                                // 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
                                // 1.0 = fully efficient (no difference between air & ground targets)
                                // default if unset: 0.25
                                // Ground targets, especially ships, already have a massively larger RCS than fighters, hence
                                // any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
                                // values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.

        radarDetectionCurve
        {
          // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
          // this defines both min/max range of the radar, and sensitivity/efficiency
          // it is recommended to define an "assured detection range", at which all craft are detected regardless
          //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
          //        key = distance	rcs
                    key = 0.0	0
                    key = 18	0	//between 0 and 7 km the min cross section is 0, thus assured detection of everything
                    key = 24 12   //
                    key = 30 30  //effective range 20km, can still detect relatively small rcs
                    key = 37 55	//max range 30km, but only for very large rcs
        }

        radarLockTrackCurve
        {
            // same as detectionCurve, just for locking/tracking purpose
            // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
            //   ECM-jammers & chaff completely ineffective!!
            //      key = distance	rcs
                    key = 0.0	0
                    key = 10	0	//overall curve similar to detectionCurve, but needs bigger rcs to lock at comparable range
                    key = 22 12
                    key = 30 30
                    key = 40 55
        }
}

}