PART
{
// --- general parameters ---
name = m163
module = Part
author = Marhfg

// --- asset parameters ---
mesh = m163.mu
rescaleFactor = 1

// --- node definitions ---
node_stack_bottom = 0, 0, 0, 0, -1, 0, 1
node_attach = 0, 0, 0, 0, -1, 0, 1

// --- editor parameters ---
TechRequired = survivability
entryCost = 2100
cost = 2700
category = Utility
subcategory = 0
title = M163
manufacturer = Fox Defense Contracts
description = The MBT-70 was developed by the United States and West Germany in the context of the Cold War, intended to counter the new generation of Warsaw Pact tanks developed by the Soviet Union. The new tank was to be equipped with a number of advanced features such as newly developed "kneeling" hydropneumatic suspension and housing the entire crew in the large turret, and was armed with a 152mm XM150 gun/launcher, which could use both conventional ammunition and the Shillelagh missile for long range combat.
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,1,1,1

// --- standard part parameters ---
mass = 0.168
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 250
maxTemp = 3600
stagingIcon = SOLID_BOOSTER

MODULE
{
	name = HitpointTracker
	ArmorThickness = 325
	maxHitPoints = 12500
}
MODULE
{
	name = ModuleTurret
	turretID = 0
	
	yawTransformName = yawTransform
	pitchTransformName = pitchTransform
	
	pitchSpeedDPS = 70
	yawSpeedDPS = 70
	
	minPitch = -5
	maxPitch = 80
	yawRange = 360
	
	smoothRotation = true
	smoothMultiplier = 10
}

MODULE
{
	name = ModuleWeapon
	
	fireTransformName = fireTransform
	turretID = 0
	
	hasDeployAnim = false
	
	hasFireAnimation = true
	fireAnimName = m163Anim
	spinDownAnimation = true
	
	roundsPerMinute = 3000
	maxDeviation = 0.163
	maxTargetingRange = 8000
	maxEffectiveDistance = 8000
	
	ammoName = Light
	bulletType = M163HEI
	requestResourceAmount = 1
	RoundsPerMag = 1100
	ReloadTime = 22
	BeltFed = false
	
	hasRecoil = true
	onlyFireInRange = false
	bulletDrop = true
	
	weaponType = ballistic	
	
	projectileColor = 255, 247, 0, 255
	
	tracerStartWidth = 0.4
	tracerEndWidth = 0.1
	tracerLength = 0
	
	maxHeat = 3600
	heatPerShot = 35
	heatLoss = 700
	
	fireSoundPath = BDArmory/Parts/20mmVulcan/sounds/VulcanCannon
	overheatSoundPath = BDArmory/Parts/20mmVulcan/sounds/VulcanEnd
	oneShotSound = false
	explModelPath = BDArmory/Models/explosion/30mmExplosion
	explSoundPath = BDArmory/Sounds/subExplode
	
}
MODULE
{
        name = ModuleRadar

        // -- Section: General Configuration --
        radarName = M163 Locking Radar		// if left empty part.title is used, but advised to set this to a nice printable text
        rwrThreatType = 0				// IMPORTANT, please set correctly:
                                // 0 = SAM site radar
                                // 1 = Fighter radar (airborne)
                                // 2 = AWACS radar (airborne)
                                // 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
                                // 5 = Detection radar (ground/ship based)
                                // 6 = SONAR (ship/submarine based)
        rotationTransformName = RadarTurn
	    turretID = 1					// if needed
        resourceDrain = 0.85				// change to higher values for more capable radars, e.g AESA

        // -- Section: Capabilities --
        omnidirectional = false				// false: boresight scan radar
        directionalFieldOfView = 10			// for omni and boresight
        boresightFOV = 10				// for boresight only
        scanRotationSpeed = 120				// degress per second
        //lockRotationSpeed = 120				// only relevant if canLock
        //lockRotationAngle = 4
        showDirectionWhileScan = true			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
        //multiLockFOV = 30				// only relevant if canLock
        //lockAttemptFOV = 2				// only relevant if canLock
        maxLocks = 1					//how many targets can be locked/tracked simultaneously. only relevant if canLock

        canScan = true					// scanning/detecting targets (volume search)
        canLock = true					// locking/tracking targets (fire control)
        canTrackWhileScan = true			// continue scanning while tracking a locked target
        canRecieveRadarData = true			// can work as passive data receiver (NOTE THE SPELLING! [SIC])

        minSignalThreshold = 120				// DEPRECATED, NO LONGER USED! use detection float curve!
        minLockedSignalThreshold = 180			// DEPRECATED, NO LONGER USED! use locktrack float curve!

        radarGroundClutterFactor = 0.15			// how much is the radar efficiency reduced to by ground clutter/look-down?
                                // 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
                                // 1.0 = fully efficient (no difference between air & ground targets)
                                // default if unset: 0.25
                                // Ground targets, especially ships, already have a massively larger RCS than fighters, hence
                                // any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
                                // values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.

        radarDetectionCurve
        {
          // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
          // this defines both min/max range of the radar, and sensitivity/efficiency
          // it is recommended to define an "assured detection range", at which all craft are detected regardless
          //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
          //        key = distance	rcs
                    key = 0.0	0
                    key = 2	0	//between 0 and 7 km the min cross section is 0, thus assured detection of everything
                    key = 5 7   //
                    key = 13 17  //effective range 20km, can still detect relatively small rcs
                    key = 30 35	//max range 30km, but only for very large rcs
        }

        radarLockTrackCurve
        {
            // same as detectionCurve, just for locking/tracking purpose
            // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
            //   ECM-jammers & chaff completely ineffective!!
            //      key = distance	rcs
                    key = 0.0	0
                    key = 3	4	//overall curve similar to detectionCurve, but needs bigger rcs to lock at comparable range
                    key = 7 17
                    key = 15 30
                    key = 25 60
        }
}
RESOURCE
{
	name = Light
	amount = 2200
	maxAmount = 2200
}
}