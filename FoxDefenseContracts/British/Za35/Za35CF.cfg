PART
{

// --- general parameters ---
name = Za-35
module = Part
author = Marhfg

// --- asset parameters ---
mesh = Za-35.mu
rescaleFactor = 1

// --- node definitions ---
node_stack_bottom = 0.0, 0, 0.0, 0.0, -1.0, 0.0, 1
node_attach = 0.0, 0, 0.0, 0.0, -1.0, 0.0, 1

// --- editor parameters ---
TechRequired = precisionEngineering
entryCost = 2100
cost = 3425
category = Utility
subcategory = 0
title = Za-35
manufacturer = Fox Defense Contracts
description =  The ZA-35 self-propelled anti-aircraft gun was developed by ARMSCOR in the early 90s under the ZA-SPADS or Self-Propelled Air Defense System programme. However development work on this SPAAG has stopped. Some sources claim that only one vehicle was built.
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,1,1,1

// --- standard part parameters ---
mass = 0.48
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 250
maxTemp = 3600
stagingIcon = SOLID_BOOSTER

MODULE
{
	name = HitpointTracker
	ArmorThickness = 30
	maxHitPoints = 4500
}
MODULE
{
	name = ModuleTurret
	turretID = 0
	
	yawTransformName = yawTransform
	pitchTransformName = pitchTransform
	
	pitchSpeedDPS = 42
	yawSpeedDPS = 42
	
	minPitch = -8
	maxPitch = 81
	yawRange = 360
	
	smoothRotation = true
	smoothMultiplier = 10
}
MODULE
{
	name = ModuleWeapon
	turretID = 0
	
	fireTransformName = fireTransform
	muzzleTransformName = muzzleTransform; muzzleTransform1
	
	hasDeployAnim = false
	
	hasFireAnimation = true
	fireAnimName = Za35Anim1; Za35Anim2
	spinDownAnimation = false
	
	roundsPerMinute = 550
	maxDeviation = 0.028
	maxTargetingRange = 13500
	maxEffectiveDistance = 13500
	
	ammoName = Medium
	bulletType = 35mmMarksAPI; 35mmMarksHE
	requestResourceAmount = 1
	RoundsPerMag = 230
	ReloadTime = 1
	BeltFed = false
	
	hasRecoil = true
	onlyFireInRange = false
	bulletDrop = true
	
	weaponType = ballistic	
	
	projectileColor = 255, 247, 0, 255
	
	tracerStartWidth = 0.4
	tracerEndWidth = 0.1
	tracerLength = 0
	
	maxHeat = 7200
	heatPerShot = 40
	heatLoss = 1200
	
	fireSoundPath = FoxDefenseContracts/Sounds/37mm
	overheatSoundPath = BDArmory/Parts/50CalTurret/sounds/turretOverheat
	oneShotSound = true
	
}
RESOURCE
{
	name = Medium
	amount = 460
	maxAmount = 460
}
MODULE
{
        name = ModuleRadar

        // -- Section: General Configuration --
        radarName = Za-35 Locking Radar		// if left empty part.title is used, but advised to set this to a nice printable text
        rwrThreatType = 0				// IMPORTANT, please set correctly:
                                // 0 = SAM site radar
                                // 1 = Fighter radar (airborne)
                                // 2 = AWACS radar (airborne)
                                // 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
                                // 5 = Detection radar (ground/ship based)
                                // 6 = SONAR (ship/submarine based)
        rotationTransformName = radarBase
	    turretID = 1					// if needed
        resourceDrain = 0.85				// change to higher values for more capable radars, e.g AESA

        // -- Section: Capabilities --
        omnidirectional = true				// false: boresight scan radar
        directionalFieldOfView = 30			// for omni and boresight
        //boresightFOV = 15				// for boresight only
        scanRotationSpeed = 480				// degress per second
        //lockRotationSpeed = 120				// only relevant if canLock
        //lockRotationAngle = 4
        showDirectionWhileScan = true			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
        //multiLockFOV = 30				// only relevant if canLock
        //lockAttemptFOV = 2				// only relevant if canLock
        maxLocks = 1					//how many targets can be locked/tracked simultaneously. only relevant if canLock

        canScan = true					// scanning/detecting targets (volume search)
        canLock = true					// locking/tracking targets (fire control)
        canTrackWhileScan = true			// continue scanning while tracking a locked target
        canRecieveRadarData = true			// can work as passive data receiver (NOTE THE SPELLING! [SIC])

        minSignalThreshold = 120				// DEPRECATED, NO LONGER USED! use detection float curve!
        minLockedSignalThreshold = 180			// DEPRECATED, NO LONGER USED! use locktrack float curve!

        radarGroundClutterFactor = 0.30			// how much is the radar efficiency reduced to by ground clutter/look-down?
                                // 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
                                // 1.0 = fully efficient (no difference between air & ground targets)
                                // default if unset: 0.25
                                // Ground targets, especially ships, already have a massively larger RCS than fighters, hence
                                // any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
                                // values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.

        radarDetectionCurve
        {
          // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
          // this defines both min/max range of the radar, and sensitivity/efficiency
          // it is recommended to define an "assured detection range", at which all craft are detected regardless
          //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
          //        key = distance	rcs
                    key = 0.0	0
                    key = 30	0	//between 0 and 7 km the min cross section is 0, thus assured detection of everything
                    key = 35 12   //
                    key = 40 25  //effective range 20km, can still detect relatively small rcs
                    key = 48 55	//max range 30km, but only for very large rcs
        }

        radarLockTrackCurve
        {
            // same as detectionCurve, just for locking/tracking purpose
            // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
            //   ECM-jammers & chaff completely ineffective!!
            //      key = distance	rcs
                    key = 0.0	0
                    key = 15	0	//overall curve similar to detectionCurve, but needs bigger rcs to lock at comparable range
                    key = 25 12
                    key = 32 39
                    key = 40 55
        }
}
}